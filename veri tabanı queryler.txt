USE vtysproje; 
CREATE TABLE grup_yoneticisi (
    grup_yoneticisi_no INT AUTO_INCREMENT PRIMARY KEY,
    grup_yoneticisi_ad_soyad VARCHAR(255),
    sicil_no VARCHAR(255),
    mail_adresi VARCHAR(255)
);

CREATE TABLE takim_lideri (
    takim_lideri_no INT AUTO_INCREMENT PRIMARY KEY,
    takim_lideri_ad_soyad VARCHAR(255),
    sicil_no VARCHAR(255),
    grup_yoneticisi_no INT,
    FOREIGN KEY (grup_yoneticisi_no) REFERENCES grup_yoneticisi(grup_yoneticisi_no)
);

CREATE TABLE gorusme (
    gorusme_no INT AUTO_INCREMENT PRIMARY KEY,
    musteri_id INT,
    musteri_ad_soyad VARCHAR(255),
    gorusme_konusu VARCHAR(255),
    gorusme_tarihi DATE,
    gorusme_baslama_saati TIME,
    gorusme_bitis_saati TIME,
    gorusme_durum VARCHAR(255)
);

CREATE TABLE itirazlar (
    itiraz_no INT AUTO_INCREMENT PRIMARY KEY,
    musteri_temsilcisi_no INT,
    musteri_temsilcisi_ad_soyad VARCHAR(255),
    itiraz_aciklamasi VARCHAR(255),
    itiraz_tarihi DATE,
    itiraz_cevabi VARCHAR(255),
    itiraz_durumu ENUM('Bekliyor', 'Onaylandi', 'Reddedildi')
);

CREATE TABLE primler (
    prim_no INT AUTO_INCREMENT PRIMARY KEY,
    musteri_temsilcisi_no INT ,
    prim_miktari INT,
    prim_tarihi DATE,
    FOREIGN KEY (musteri_temsilci_no) REFERENCES musteri_temsilcisi(musteri_temsilcisi_no),
);

CREATE TABLE musteri_temsilcisi (
    musteri_temsilcisi_no INT AUTO_INCREMENT PRIMARY KEY,
    musteri_temsilcisi_ad_soyad VARCHAR(255),
    gorusme_no INT,
    itiraz_no INT,
    sicil_no INT,
    takim_lideri_no INT,
    FOREIGN KEY (gorusme_no) REFERENCES gorusme(gorusme_no),
    FOREIGN KEY (itiraz_no) REFERENCES itirazlar(itiraz_no),
    FOREIGN KEY (takim_lideri_no) REFERENCES takim_lideri(takim_lideri_no)
);

CREATE TABLE kullanicilar (
    kullanici_id INT AUTO_INCREMENT PRIMARY KEY,
    kullanici_adi VARCHAR(255),
    sifre VARCHAR(255),
    rol ENUM('musteri_temsilcisi', 'takim_lideri', 'grup_yoneticisi'),
    temsilci_no INT,
    takim_lideri_no INT,
    grup_yoneticisi_no INT,
    FOREIGN KEY (temsilci_no) REFERENCES musteri_temsilcisi(musteri_temsilcisi_no),
    FOREIGN KEY (takim_lideri_no) REFERENCES takim_lideri(takim_lideri_no),
    FOREIGN KEY (grup_yoneticisi_no) REFERENCES grup_yoneticisi(grup_yoneticisi_no)
);

------------------------------------------------------------------------------------------------------------------------------------
#GÖRÜŞME EKLEYEN STORED PROCEDURE#

USE vtysproje;

DELIMITER //

CREATE PROCEDURE spGorusmeEkle(
    IN p_musteri_id INT,
    IN p_musteri_ad_soyad VARCHAR(255),
    IN p_gorusme_konusu VARCHAR(50),
    IN p_gorusme_tarihi DATE,
    IN p_baslama_saati TIME,
    IN p_bitis_saati TIME,
    IN p_gorusme_durum VARCHAR(255)
)
BEGIN
    INSERT INTO gorusme (musteri_id, musteri_ad_soyad, gorusme_konusu, gorusme_tarihi, gorusme_baslama_saati, gorusme_bitis_saati, gorusme_durum)
    VALUES (p_musteri_id, p_musteri_ad_soyad, p_gorusme_konusu, p_gorusme_tarihi, p_baslama_saati, p_bitis_saati, p_gorusme_durum);
END //

DELIMITER ;
------------------------------------------------------------------------------------------------------------------------------------
#İTİRAZ OLUŞTURAN STORED PROCEDURE#

DELIMITER //

CREATE PROCEDURE spItirazOlustur(
    IN p_temsilci_no INT,
    IN p_itiraz_aciklamasi VARCHAR(255),
    IN p_itiraz_tarihi DATE
)
BEGIN
    INSERT INTO itirazlar (musteri_temsilcisi_no, itiraz_aciklamasi, itiraz_tarihi)
    VALUES (p_temsilci_no, p_itiraz_aciklamasi, p_itiraz_tarihi);
    
END //

DELIMITER ;

------------------------------------------------------------------------------------------------------------------------------------
#İTİRAZLARI MÜŞTERİ TEMSİLCİSİNİN EKRANINA GETİREN VIEW#

CREATE VIEW itirazlar_view AS
SELECT 
    musteri_temsilcisi_no,
    itiraz_aciklamasi,
    itiraz_cevabi,
    itiraz_durumu
FROM itirazlar;

------------------------------------------------------------------------------------------------------------------------------------
#TAKIM LİDERİ İÇİN İTİRAZLARI GETİREN STORED PROCEDURE#

DELIMITER //

CREATE PROCEDURE spTakimLideriItirazlariGetir(IN p_takim_lideri_no INT)
BEGIN
    SELECT
        i.itiraz_no,
        mt.sicil_no AS asistan_sicil_no,
        mt.musteri_temsilcisi_ad_soyad AS asistan_ad_soyad,
        i.itiraz_aciklamasi,
        DATE_FORMAT(i.itiraz_tarihi, '%Y-%m') AS itiraz_ay,
        i.itiraz_cevabi,
        i.itiraz_durumu
    FROM
        itirazlar i
    JOIN
        musteri_temsilcisi mt ON i.musteri_temsilcisi_no = mt.musteri_temsilcisi_no
    WHERE
        mt.takim_lideri_no = p_takim_lideri_no;
END //

DELIMITER ;
------------------------------------------------------------------------------------------------------------------------------------
#TAKIM LİDERİ İTİRAZLARI CEVAPLAMASINI SAĞLAYAN STORED PROCEDURE#

CREATE PROCEDURE spItirazCevapla(IN p_itiraz_no INT, IN p_cevap_aciklamasi VARCHAR(255), IN p_itiraz_durumu ENUM('Bekliyor','Onaylandi','Reddedildi'))
BEGIN
    UPDATE itirazlar 
    SET itiraz_cevabi = p_cevap_aciklamasi, itiraz_durumu = p_itiraz_durumu
    WHERE itiraz_no = p_itiraz_no;
END
------------------------------------------------------------------------------------------------------------------------------------
#GÖRÜŞME DETAYLARINI GÖSTEREN VIEW#

CREATE VIEW vw_gorusme_detaylari AS
SELECT 
    musteri_id,
    musteri_ad_soyad,
    gorusme_konusu,
    gorusme_tarihi,
    gorusme_baslama_saati,
    gorusme_bitis_saati,
    gorusme_durum
FROM 
    gorusme;
------------------------------------------------------------------------------------------------------------------------------------
#GUNLUK PRIMI KONTROL EDEN VE HESAPLAYAN STORED PROCEDURE#
DELIMITER //

CREATE FUNCTION gunlukPrimHesapla(musteri_temsilcisi_no INT, tarih DATE) RETURNS DECIMAL(10,2)
DETERMINISTIC
READS SQL DATA
BEGIN
    DECLARE gunluk_aramalar INT;
    DECLARE kisa_aramalar INT;
    DECLARE prim DECIMAL(10,2);
    
    -- Günlük çağrı sayısını hesapla
    SELECT COUNT(*) INTO gunluk_aramalar
    FROM gorusme
    WHERE DATE(gorusme_tarihi) = tarih
    AND musteri_temsilcisi_no = musteri_temsilcisi_no;
    
    -- Görüşme süresi 5 dakikadan kısa olan çağrı sayısını hesapla
    SELECT COUNT(*) INTO kisa_aramalar
    FROM gorusme
    WHERE DATE(gorusme_tarihi) = tarih
    AND musteri_temsilcisi_no = musteri_temsilcisi_no
    AND TIME_TO_SEC(gorusme_bitis_saati) - TIME_TO_SEC(gorusme_baslama_saati) <= 300;
    
    -- Prim hesabını yap
    IF gunluk_aramalar < 100 THEN
        SET prim = 0;
    ELSEIF gunluk_aramalar >= 100 AND gunluk_aramalar < 200 THEN
        SET prim = (gunluk_aramalar * 1.25);
    ELSE
        SET prim = (gunluk_aramalar * 2);
    END IF;
    
    RETURN prim;
END //

DELIMITER ;

------------------------------------------------------------------------------------------------------------------------------------
#AYLIK PRİMİ HESAPLAYAN STORED PROCEDURE#


DELIMITER //

CREATE FUNCTION aylikPrimHesapla(musteri_temsilcisi_no INT, ay INT, yil INT) RETURNS DECIMAL(10,2)
DETERMINISTIC
READS SQL DATA
BEGIN
    DECLARE total_prim DECIMAL(10,2);
    DECLARE tarih DATE;
    DECLARE gunluk_prim DECIMAL(10,2);
    
    SET tarih = STR_TO_DATE(CONCAT(yil, '-', ay, '-', '01'), '%Y-%m-%d');
    SET total_prim = 5000;
    
    WHILE MONTH(tarih) = ay DO
        SET gunluk_prim = gunlukPrimHesapla(musteri_temsilcisi_no, tarih);
        SET total_prim = total_prim + gunluk_prim;
        SET tarih = DATE_ADD(tarih, INTERVAL 1 DAY);
    END WHILE;
    
    RETURN total_prim;
END //

DELIMITER ;
------------------------------------------------------------------------------------------------------------------------------------
#MÜŞTERİ TEMSİLCİSİNİ KAYDEDEN TRIGGER#

DELIMITER //

CREATE TRIGGER trg_insert_musteri_temsilcisi
AFTER INSERT ON kullanicilar
FOR EACH ROW
BEGIN
    IF NEW.rol = 'musteri_temsilcisi' THEN
        INSERT INTO musteri_temsilcisi (musteri_temsilcisi_ad_soyad, sicil_no, takim_lideri_no)
        VALUES (NEW.kullanici_adi, '2024', 1);
    END IF;
END;

DELIMITER;
------------------------------------------------------------------------------------------------------------------------------------
#TAKIM LİDERİNİ KAYDEDEN TRIGGER#

DELIMITER //

CREATE TRIGGER trg_insert_takim_lideri
AFTER INSERT ON kullanicilar
FOR EACH ROW
BEGIN
    IF NEW.rol = 'takim_lideri' THEN
        INSERT INTO takim_lideri (takim_lideri_ad_soyad, sicil_no, grup_yoneticisi_no)
        VALUES (NEW.kullanici_adi, '2025', 1);
    END IF;

END;
DELIMITER;

------------------------------------------------------------------------------------------------------------------------------------
#GRUP YÖNETİCİSİNİ KAYDEDEN TRIGGER#

DELIMITER //

CREATE TRIGGER trg_insert_grup_yoneticisi
AFTER INSERT ON kullanicilar
FOR EACH ROW
BEGIN
    IF NEW.rol = 'grup_yoneticisi' THEN
        INSERT INTO grup_yoneticisi (grup_yoneticisi_ad_soyad, sicil_no, mail_adresi)
        VALUES (NEW.kullanici_adi, '2026', 'geirenfare@gmail.com');
    END IF;
END;

DELIMITER ;
